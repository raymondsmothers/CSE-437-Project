/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface GeocacheInterface extends utils.Interface {
  functions: {
    "approveAdmin(address)": FunctionFragment;
    "creatorContract()": FunctionFragment;
    "geocacheToNumFound(uint256)": FunctionFragment;
    "getAdmins()": FunctionFragment;
    "getAllActiveGeocacheIDs()": FunctionFragment;
    "getGeolocationsOfGeocache(uint256)": FunctionFragment;
    "getUsersGeocaches(address)": FunctionFragment;
    "hasMintedTokenId(uint256,address)": FunctionFragment;
    "isAdmin(address)": FunctionFragment;
    "mintItemInGeocache(uint256,address)": FunctionFragment;
    "newGeocache(uint256,string,string,string[],string,string,uint256,string,string)": FunctionFragment;
    "numActiveGeocaches()": FunctionFragment;
    "numGeocaches()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "revokeAdmin(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "tokenIdToGeocache(uint256)": FunctionFragment;
    "tokenURI(address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateGeocacheTokenURI(uint256,string)": FunctionFragment;
    "userToGeocache(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "approveAdmin"
      | "creatorContract"
      | "geocacheToNumFound"
      | "getAdmins"
      | "getAllActiveGeocacheIDs"
      | "getGeolocationsOfGeocache"
      | "getUsersGeocaches"
      | "hasMintedTokenId"
      | "isAdmin"
      | "mintItemInGeocache"
      | "newGeocache"
      | "numActiveGeocaches"
      | "numGeocaches"
      | "owner"
      | "renounceOwnership"
      | "revokeAdmin"
      | "supportsInterface"
      | "tokenIdToGeocache"
      | "tokenURI"
      | "transferOwnership"
      | "updateGeocacheTokenURI"
      | "userToGeocache"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "approveAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "creatorContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "geocacheToNumFound",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "getAdmins", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAllActiveGeocacheIDs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGeolocationsOfGeocache",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUsersGeocaches",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasMintedTokenId",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "mintItemInGeocache",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "newGeocache",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "numActiveGeocaches",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numGeocaches",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenIdToGeocache",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateGeocacheTokenURI",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "userToGeocache",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "approveAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creatorContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "geocacheToNumFound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAdmins", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllActiveGeocacheIDs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGeolocationsOfGeocache",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUsersGeocaches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasMintedTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintItemInGeocache",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newGeocache",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numActiveGeocaches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numGeocaches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenIdToGeocache",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateGeocacheTokenURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userToGeocache",
    data: BytesLike
  ): Result;

  events: {
    "AdminApproved(address,address)": EventFragment;
    "AdminRevoked(address,address)": EventFragment;
    "GeocacheCreated(address,string,uint256)": EventFragment;
    "GeocacheItemMinted(address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminApproved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AdminRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GeocacheCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GeocacheItemMinted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface AdminApprovedEventObject {
  account: string;
  sender: string;
}
export type AdminApprovedEvent = TypedEvent<
  [string, string],
  AdminApprovedEventObject
>;

export type AdminApprovedEventFilter = TypedEventFilter<AdminApprovedEvent>;

export interface AdminRevokedEventObject {
  account: string;
  sender: string;
}
export type AdminRevokedEvent = TypedEvent<
  [string, string],
  AdminRevokedEventObject
>;

export type AdminRevokedEventFilter = TypedEventFilter<AdminRevokedEvent>;

export interface GeocacheCreatedEventObject {
  creator: string;
  name: string;
  id: BigNumber;
}
export type GeocacheCreatedEvent = TypedEvent<
  [string, string, BigNumber],
  GeocacheCreatedEventObject
>;

export type GeocacheCreatedEventFilter = TypedEventFilter<GeocacheCreatedEvent>;

export interface GeocacheItemMintedEventObject {
  receiver: string;
  geocacheIndex: BigNumber;
  itemIndex: BigNumber;
}
export type GeocacheItemMintedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  GeocacheItemMintedEventObject
>;

export type GeocacheItemMintedEventFilter =
  TypedEventFilter<GeocacheItemMintedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface Geocache extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GeocacheInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    approveAdmin(
      admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    creatorContract(overrides?: CallOverrides): Promise<[string]>;

    geocacheToNumFound(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAdmins(
      overrides?: CallOverrides
    ): Promise<[string[]] & { admins: string[] }>;

    getAllActiveGeocacheIDs(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getGeolocationsOfGeocache(
      geocacheIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getUsersGeocaches(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    hasMintedTokenId(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isAdmin(
      admin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mintItemInGeocache(
      _geocacheId: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    newGeocache(
      _numItems: PromiseOrValue<BigNumberish>,
      _tokenURI: PromiseOrValue<string>,
      _dateCreated: PromiseOrValue<string>,
      _itemGeolocations: PromiseOrValue<string>[],
      _epicenterLat: PromiseOrValue<string>,
      _epicenterLong: PromiseOrValue<string>,
      _radius: PromiseOrValue<BigNumberish>,
      _name: PromiseOrValue<string>,
      _originStory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    numActiveGeocaches(overrides?: CallOverrides): Promise<[BigNumber]>;

    numGeocaches(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeAdmin(
      admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    tokenIdToGeocache(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        boolean,
        string,
        string,
        string,
        BigNumber,
        string
      ] & {
        creator: string;
        tokenURI: string;
        dateCreated: string;
        numItems: BigNumber;
        isActive: boolean;
        epicenterLat: string;
        epicenterLong: string;
        name: string;
        radius: BigNumber;
        originStory: string;
      }
    >;

    tokenURI(
      _creatorContract: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateGeocacheTokenURI(
      _tokenId: PromiseOrValue<BigNumberish>,
      _newTokenURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    userToGeocache(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  approveAdmin(
    admin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  creatorContract(overrides?: CallOverrides): Promise<string>;

  geocacheToNumFound(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAdmins(overrides?: CallOverrides): Promise<string[]>;

  getAllActiveGeocacheIDs(overrides?: CallOverrides): Promise<BigNumber[]>;

  getGeolocationsOfGeocache(
    geocacheIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getUsersGeocaches(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  hasMintedTokenId(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isAdmin(
    admin: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mintItemInGeocache(
    _geocacheId: PromiseOrValue<BigNumberish>,
    _user: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  newGeocache(
    _numItems: PromiseOrValue<BigNumberish>,
    _tokenURI: PromiseOrValue<string>,
    _dateCreated: PromiseOrValue<string>,
    _itemGeolocations: PromiseOrValue<string>[],
    _epicenterLat: PromiseOrValue<string>,
    _epicenterLong: PromiseOrValue<string>,
    _radius: PromiseOrValue<BigNumberish>,
    _name: PromiseOrValue<string>,
    _originStory: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  numActiveGeocaches(overrides?: CallOverrides): Promise<BigNumber>;

  numGeocaches(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeAdmin(
    admin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  tokenIdToGeocache(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      BigNumber,
      boolean,
      string,
      string,
      string,
      BigNumber,
      string
    ] & {
      creator: string;
      tokenURI: string;
      dateCreated: string;
      numItems: BigNumber;
      isActive: boolean;
      epicenterLat: string;
      epicenterLong: string;
      name: string;
      radius: BigNumber;
      originStory: string;
    }
  >;

  tokenURI(
    _creatorContract: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateGeocacheTokenURI(
    _tokenId: PromiseOrValue<BigNumberish>,
    _newTokenURI: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  userToGeocache(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    approveAdmin(
      admin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    creatorContract(overrides?: CallOverrides): Promise<string>;

    geocacheToNumFound(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAdmins(overrides?: CallOverrides): Promise<string[]>;

    getAllActiveGeocacheIDs(overrides?: CallOverrides): Promise<BigNumber[]>;

    getGeolocationsOfGeocache(
      geocacheIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getUsersGeocaches(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    hasMintedTokenId(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isAdmin(
      admin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mintItemInGeocache(
      _geocacheId: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    newGeocache(
      _numItems: PromiseOrValue<BigNumberish>,
      _tokenURI: PromiseOrValue<string>,
      _dateCreated: PromiseOrValue<string>,
      _itemGeolocations: PromiseOrValue<string>[],
      _epicenterLat: PromiseOrValue<string>,
      _epicenterLong: PromiseOrValue<string>,
      _radius: PromiseOrValue<BigNumberish>,
      _name: PromiseOrValue<string>,
      _originStory: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    numActiveGeocaches(overrides?: CallOverrides): Promise<BigNumber>;

    numGeocaches(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    revokeAdmin(
      admin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    tokenIdToGeocache(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        boolean,
        string,
        string,
        string,
        BigNumber,
        string
      ] & {
        creator: string;
        tokenURI: string;
        dateCreated: string;
        numItems: BigNumber;
        isActive: boolean;
        epicenterLat: string;
        epicenterLong: string;
        name: string;
        radius: BigNumber;
        originStory: string;
      }
    >;

    tokenURI(
      _creatorContract: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateGeocacheTokenURI(
      _tokenId: PromiseOrValue<BigNumberish>,
      _newTokenURI: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    userToGeocache(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "AdminApproved(address,address)"(
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): AdminApprovedEventFilter;
    AdminApproved(
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): AdminApprovedEventFilter;

    "AdminRevoked(address,address)"(
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): AdminRevokedEventFilter;
    AdminRevoked(
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): AdminRevokedEventFilter;

    "GeocacheCreated(address,string,uint256)"(
      creator?: null,
      name?: null,
      id?: null
    ): GeocacheCreatedEventFilter;
    GeocacheCreated(
      creator?: null,
      name?: null,
      id?: null
    ): GeocacheCreatedEventFilter;

    "GeocacheItemMinted(address,uint256,uint256)"(
      receiver?: null,
      geocacheIndex?: null,
      itemIndex?: null
    ): GeocacheItemMintedEventFilter;
    GeocacheItemMinted(
      receiver?: null,
      geocacheIndex?: null,
      itemIndex?: null
    ): GeocacheItemMintedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    approveAdmin(
      admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    creatorContract(overrides?: CallOverrides): Promise<BigNumber>;

    geocacheToNumFound(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAdmins(overrides?: CallOverrides): Promise<BigNumber>;

    getAllActiveGeocacheIDs(overrides?: CallOverrides): Promise<BigNumber>;

    getGeolocationsOfGeocache(
      geocacheIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUsersGeocaches(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasMintedTokenId(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAdmin(
      admin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintItemInGeocache(
      _geocacheId: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    newGeocache(
      _numItems: PromiseOrValue<BigNumberish>,
      _tokenURI: PromiseOrValue<string>,
      _dateCreated: PromiseOrValue<string>,
      _itemGeolocations: PromiseOrValue<string>[],
      _epicenterLat: PromiseOrValue<string>,
      _epicenterLong: PromiseOrValue<string>,
      _radius: PromiseOrValue<BigNumberish>,
      _name: PromiseOrValue<string>,
      _originStory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    numActiveGeocaches(overrides?: CallOverrides): Promise<BigNumber>;

    numGeocaches(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeAdmin(
      admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenIdToGeocache(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      _creatorContract: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateGeocacheTokenURI(
      _tokenId: PromiseOrValue<BigNumberish>,
      _newTokenURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    userToGeocache(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approveAdmin(
      admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    creatorContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    geocacheToNumFound(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAdmins(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllActiveGeocacheIDs(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGeolocationsOfGeocache(
      geocacheIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUsersGeocaches(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasMintedTokenId(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAdmin(
      admin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintItemInGeocache(
      _geocacheId: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    newGeocache(
      _numItems: PromiseOrValue<BigNumberish>,
      _tokenURI: PromiseOrValue<string>,
      _dateCreated: PromiseOrValue<string>,
      _itemGeolocations: PromiseOrValue<string>[],
      _epicenterLat: PromiseOrValue<string>,
      _epicenterLong: PromiseOrValue<string>,
      _radius: PromiseOrValue<BigNumberish>,
      _name: PromiseOrValue<string>,
      _originStory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    numActiveGeocaches(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numGeocaches(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeAdmin(
      admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenIdToGeocache(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenURI(
      _creatorContract: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateGeocacheTokenURI(
      _tokenId: PromiseOrValue<BigNumberish>,
      _newTokenURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    userToGeocache(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
