/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface IAdminControlInterface extends utils.Interface {
  functions: {
    "approveAdmin(address)": FunctionFragment;
    "getAdmins()": FunctionFragment;
    "isAdmin(address)": FunctionFragment;
    "revokeAdmin(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "approveAdmin"
      | "getAdmins"
      | "isAdmin"
      | "revokeAdmin"
      | "supportsInterface"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "approveAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "getAdmins", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "approveAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAdmins", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;

  events: {
    "AdminApproved(address,address)": EventFragment;
    "AdminRevoked(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminApproved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AdminRevoked"): EventFragment;
}

export interface AdminApprovedEventObject {
  account: string;
  sender: string;
}
export type AdminApprovedEvent = TypedEvent<
  [string, string],
  AdminApprovedEventObject
>;

export type AdminApprovedEventFilter = TypedEventFilter<AdminApprovedEvent>;

export interface AdminRevokedEventObject {
  account: string;
  sender: string;
}
export type AdminRevokedEvent = TypedEvent<
  [string, string],
  AdminRevokedEventObject
>;

export type AdminRevokedEventFilter = TypedEventFilter<AdminRevokedEvent>;

export interface IAdminControl extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IAdminControlInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    approveAdmin(
      admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAdmins(overrides?: CallOverrides): Promise<[string[]]>;

    isAdmin(
      admin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    revokeAdmin(
      admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  approveAdmin(
    admin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAdmins(overrides?: CallOverrides): Promise<string[]>;

  isAdmin(
    admin: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  revokeAdmin(
    admin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    approveAdmin(
      admin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAdmins(overrides?: CallOverrides): Promise<string[]>;

    isAdmin(
      admin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    revokeAdmin(
      admin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "AdminApproved(address,address)"(
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): AdminApprovedEventFilter;
    AdminApproved(
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): AdminApprovedEventFilter;

    "AdminRevoked(address,address)"(
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): AdminRevokedEventFilter;
    AdminRevoked(
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): AdminRevokedEventFilter;
  };

  estimateGas: {
    approveAdmin(
      admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAdmins(overrides?: CallOverrides): Promise<BigNumber>;

    isAdmin(
      admin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revokeAdmin(
      admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approveAdmin(
      admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAdmins(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isAdmin(
      admin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revokeAdmin(
      admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
