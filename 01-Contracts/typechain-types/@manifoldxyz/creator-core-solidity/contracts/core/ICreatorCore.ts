/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface ICreatorCoreInterface extends utils.Interface {
  functions: {
    "blacklistExtension(address)": FunctionFragment;
    "getExtensions()": FunctionFragment;
    "getFeeBps(uint256)": FunctionFragment;
    "getFeeRecipients(uint256)": FunctionFragment;
    "getFees(uint256)": FunctionFragment;
    "getRoyalties(uint256)": FunctionFragment;
    "registerExtension(address,string)": FunctionFragment;
    "registerExtension(address,string,bool)": FunctionFragment;
    "royaltyInfo(uint256,uint256)": FunctionFragment;
    "setApproveTransferExtension(bool)": FunctionFragment;
    "setBaseTokenURI(string)": FunctionFragment;
    "setBaseTokenURIExtension(string)": FunctionFragment;
    "setBaseTokenURIExtension(string,bool)": FunctionFragment;
    "setMintPermissions(address,address)": FunctionFragment;
    "setRoyalties(uint256,address[],uint256[])": FunctionFragment;
    "setRoyalties(address[],uint256[])": FunctionFragment;
    "setRoyaltiesExtension(address,address[],uint256[])": FunctionFragment;
    "setTokenURI(uint256,string)": FunctionFragment;
    "setTokenURI(uint256[],string[])": FunctionFragment;
    "setTokenURIExtension(uint256[],string[])": FunctionFragment;
    "setTokenURIExtension(uint256,string)": FunctionFragment;
    "setTokenURIPrefix(string)": FunctionFragment;
    "setTokenURIPrefixExtension(string)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "tokenExtension(uint256)": FunctionFragment;
    "unregisterExtension(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "blacklistExtension"
      | "getExtensions"
      | "getFeeBps"
      | "getFeeRecipients"
      | "getFees"
      | "getRoyalties"
      | "registerExtension(address,string)"
      | "registerExtension(address,string,bool)"
      | "royaltyInfo"
      | "setApproveTransferExtension"
      | "setBaseTokenURI"
      | "setBaseTokenURIExtension(string)"
      | "setBaseTokenURIExtension(string,bool)"
      | "setMintPermissions"
      | "setRoyalties(uint256,address[],uint256[])"
      | "setRoyalties(address[],uint256[])"
      | "setRoyaltiesExtension"
      | "setTokenURI(uint256,string)"
      | "setTokenURI(uint256[],string[])"
      | "setTokenURIExtension(uint256[],string[])"
      | "setTokenURIExtension(uint256,string)"
      | "setTokenURIPrefix"
      | "setTokenURIPrefixExtension"
      | "supportsInterface"
      | "tokenExtension"
      | "unregisterExtension"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "blacklistExtension",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getExtensions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeBps",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeRecipients",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getFees",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoyalties",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerExtension(address,string)",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerExtension(address,string,bool)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "royaltyInfo",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setApproveTransferExtension",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBaseTokenURI",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBaseTokenURIExtension(string)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBaseTokenURIExtension(string,bool)",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMintPermissions",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoyalties(uint256,address[],uint256[])",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoyalties(address[],uint256[])",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoyaltiesExtension",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenURI(uint256,string)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenURI(uint256[],string[])",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenURIExtension(uint256[],string[])",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenURIExtension(uint256,string)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenURIPrefix",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenURIPrefixExtension",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenExtension",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "unregisterExtension",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "blacklistExtension",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExtensions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFeeBps", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFeeRecipients",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoyalties",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerExtension(address,string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerExtension(address,string,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "royaltyInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApproveTransferExtension",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBaseTokenURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBaseTokenURIExtension(string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBaseTokenURIExtension(string,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMintPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRoyalties(uint256,address[],uint256[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRoyalties(address[],uint256[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRoyaltiesExtension",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenURI(uint256,string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenURI(uint256[],string[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenURIExtension(uint256[],string[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenURIExtension(uint256,string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenURIPrefix",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenURIPrefixExtension",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenExtension",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unregisterExtension",
    data: BytesLike
  ): Result;

  events: {
    "DefaultRoyaltiesUpdated(address[],uint256[])": EventFragment;
    "ExtensionApproveTransferUpdated(address,bool)": EventFragment;
    "ExtensionBlacklisted(address,address)": EventFragment;
    "ExtensionRegistered(address,address)": EventFragment;
    "ExtensionRoyaltiesUpdated(address,address[],uint256[])": EventFragment;
    "ExtensionUnregistered(address,address)": EventFragment;
    "MintPermissionsUpdated(address,address,address)": EventFragment;
    "RoyaltiesUpdated(uint256,address[],uint256[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DefaultRoyaltiesUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ExtensionApproveTransferUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExtensionBlacklisted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExtensionRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExtensionRoyaltiesUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExtensionUnregistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MintPermissionsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoyaltiesUpdated"): EventFragment;
}

export interface DefaultRoyaltiesUpdatedEventObject {
  receivers: string[];
  basisPoints: BigNumber[];
}
export type DefaultRoyaltiesUpdatedEvent = TypedEvent<
  [string[], BigNumber[]],
  DefaultRoyaltiesUpdatedEventObject
>;

export type DefaultRoyaltiesUpdatedEventFilter =
  TypedEventFilter<DefaultRoyaltiesUpdatedEvent>;

export interface ExtensionApproveTransferUpdatedEventObject {
  extension: string;
  enabled: boolean;
}
export type ExtensionApproveTransferUpdatedEvent = TypedEvent<
  [string, boolean],
  ExtensionApproveTransferUpdatedEventObject
>;

export type ExtensionApproveTransferUpdatedEventFilter =
  TypedEventFilter<ExtensionApproveTransferUpdatedEvent>;

export interface ExtensionBlacklistedEventObject {
  extension: string;
  sender: string;
}
export type ExtensionBlacklistedEvent = TypedEvent<
  [string, string],
  ExtensionBlacklistedEventObject
>;

export type ExtensionBlacklistedEventFilter =
  TypedEventFilter<ExtensionBlacklistedEvent>;

export interface ExtensionRegisteredEventObject {
  extension: string;
  sender: string;
}
export type ExtensionRegisteredEvent = TypedEvent<
  [string, string],
  ExtensionRegisteredEventObject
>;

export type ExtensionRegisteredEventFilter =
  TypedEventFilter<ExtensionRegisteredEvent>;

export interface ExtensionRoyaltiesUpdatedEventObject {
  extension: string;
  receivers: string[];
  basisPoints: BigNumber[];
}
export type ExtensionRoyaltiesUpdatedEvent = TypedEvent<
  [string, string[], BigNumber[]],
  ExtensionRoyaltiesUpdatedEventObject
>;

export type ExtensionRoyaltiesUpdatedEventFilter =
  TypedEventFilter<ExtensionRoyaltiesUpdatedEvent>;

export interface ExtensionUnregisteredEventObject {
  extension: string;
  sender: string;
}
export type ExtensionUnregisteredEvent = TypedEvent<
  [string, string],
  ExtensionUnregisteredEventObject
>;

export type ExtensionUnregisteredEventFilter =
  TypedEventFilter<ExtensionUnregisteredEvent>;

export interface MintPermissionsUpdatedEventObject {
  extension: string;
  permissions: string;
  sender: string;
}
export type MintPermissionsUpdatedEvent = TypedEvent<
  [string, string, string],
  MintPermissionsUpdatedEventObject
>;

export type MintPermissionsUpdatedEventFilter =
  TypedEventFilter<MintPermissionsUpdatedEvent>;

export interface RoyaltiesUpdatedEventObject {
  tokenId: BigNumber;
  receivers: string[];
  basisPoints: BigNumber[];
}
export type RoyaltiesUpdatedEvent = TypedEvent<
  [BigNumber, string[], BigNumber[]],
  RoyaltiesUpdatedEventObject
>;

export type RoyaltiesUpdatedEventFilter =
  TypedEventFilter<RoyaltiesUpdatedEvent>;

export interface ICreatorCore extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ICreatorCoreInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    blacklistExtension(
      extension: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getExtensions(overrides?: CallOverrides): Promise<[string[]]>;

    getFeeBps(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getFeeRecipients(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getFees(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    getRoyalties(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    "registerExtension(address,string)"(
      extension: PromiseOrValue<string>,
      baseURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "registerExtension(address,string,bool)"(
      extension: PromiseOrValue<string>,
      baseURI: PromiseOrValue<string>,
      baseURIIdentical: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    royaltyInfo(
      tokenId: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    setApproveTransferExtension(
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBaseTokenURI(
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setBaseTokenURIExtension(string)"(
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setBaseTokenURIExtension(string,bool)"(
      uri: PromiseOrValue<string>,
      identical: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMintPermissions(
      extension: PromiseOrValue<string>,
      permissions: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setRoyalties(uint256,address[],uint256[])"(
      tokenId: PromiseOrValue<BigNumberish>,
      receivers: PromiseOrValue<string>[],
      basisPoints: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setRoyalties(address[],uint256[])"(
      receivers: PromiseOrValue<string>[],
      basisPoints: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRoyaltiesExtension(
      extension: PromiseOrValue<string>,
      receivers: PromiseOrValue<string>[],
      basisPoints: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setTokenURI(uint256,string)"(
      tokenId: PromiseOrValue<BigNumberish>,
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setTokenURI(uint256[],string[])"(
      tokenIds: PromiseOrValue<BigNumberish>[],
      uris: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setTokenURIExtension(uint256[],string[])"(
      tokenId: PromiseOrValue<BigNumberish>[],
      uri: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setTokenURIExtension(uint256,string)"(
      tokenId: PromiseOrValue<BigNumberish>,
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTokenURIPrefix(
      prefix: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTokenURIPrefixExtension(
      prefix: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    tokenExtension(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    unregisterExtension(
      extension: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  blacklistExtension(
    extension: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getExtensions(overrides?: CallOverrides): Promise<string[]>;

  getFeeBps(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getFeeRecipients(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getFees(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string[], BigNumber[]]>;

  getRoyalties(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string[], BigNumber[]]>;

  "registerExtension(address,string)"(
    extension: PromiseOrValue<string>,
    baseURI: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "registerExtension(address,string,bool)"(
    extension: PromiseOrValue<string>,
    baseURI: PromiseOrValue<string>,
    baseURIIdentical: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  royaltyInfo(
    tokenId: PromiseOrValue<BigNumberish>,
    value: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber]>;

  setApproveTransferExtension(
    enabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBaseTokenURI(
    uri: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setBaseTokenURIExtension(string)"(
    uri: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setBaseTokenURIExtension(string,bool)"(
    uri: PromiseOrValue<string>,
    identical: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMintPermissions(
    extension: PromiseOrValue<string>,
    permissions: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setRoyalties(uint256,address[],uint256[])"(
    tokenId: PromiseOrValue<BigNumberish>,
    receivers: PromiseOrValue<string>[],
    basisPoints: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setRoyalties(address[],uint256[])"(
    receivers: PromiseOrValue<string>[],
    basisPoints: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRoyaltiesExtension(
    extension: PromiseOrValue<string>,
    receivers: PromiseOrValue<string>[],
    basisPoints: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setTokenURI(uint256,string)"(
    tokenId: PromiseOrValue<BigNumberish>,
    uri: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setTokenURI(uint256[],string[])"(
    tokenIds: PromiseOrValue<BigNumberish>[],
    uris: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setTokenURIExtension(uint256[],string[])"(
    tokenId: PromiseOrValue<BigNumberish>[],
    uri: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setTokenURIExtension(uint256,string)"(
    tokenId: PromiseOrValue<BigNumberish>,
    uri: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTokenURIPrefix(
    prefix: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTokenURIPrefixExtension(
    prefix: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  tokenExtension(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  unregisterExtension(
    extension: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    blacklistExtension(
      extension: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getExtensions(overrides?: CallOverrides): Promise<string[]>;

    getFeeBps(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getFeeRecipients(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getFees(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    getRoyalties(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    "registerExtension(address,string)"(
      extension: PromiseOrValue<string>,
      baseURI: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "registerExtension(address,string,bool)"(
      extension: PromiseOrValue<string>,
      baseURI: PromiseOrValue<string>,
      baseURIIdentical: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    royaltyInfo(
      tokenId: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    setApproveTransferExtension(
      enabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBaseTokenURI(
      uri: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setBaseTokenURIExtension(string)"(
      uri: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setBaseTokenURIExtension(string,bool)"(
      uri: PromiseOrValue<string>,
      identical: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMintPermissions(
      extension: PromiseOrValue<string>,
      permissions: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setRoyalties(uint256,address[],uint256[])"(
      tokenId: PromiseOrValue<BigNumberish>,
      receivers: PromiseOrValue<string>[],
      basisPoints: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    "setRoyalties(address[],uint256[])"(
      receivers: PromiseOrValue<string>[],
      basisPoints: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setRoyaltiesExtension(
      extension: PromiseOrValue<string>,
      receivers: PromiseOrValue<string>[],
      basisPoints: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    "setTokenURI(uint256,string)"(
      tokenId: PromiseOrValue<BigNumberish>,
      uri: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setTokenURI(uint256[],string[])"(
      tokenIds: PromiseOrValue<BigNumberish>[],
      uris: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    "setTokenURIExtension(uint256[],string[])"(
      tokenId: PromiseOrValue<BigNumberish>[],
      uri: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    "setTokenURIExtension(uint256,string)"(
      tokenId: PromiseOrValue<BigNumberish>,
      uri: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenURIPrefix(
      prefix: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenURIPrefixExtension(
      prefix: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    tokenExtension(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    unregisterExtension(
      extension: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DefaultRoyaltiesUpdated(address[],uint256[])"(
      receivers?: null,
      basisPoints?: null
    ): DefaultRoyaltiesUpdatedEventFilter;
    DefaultRoyaltiesUpdated(
      receivers?: null,
      basisPoints?: null
    ): DefaultRoyaltiesUpdatedEventFilter;

    "ExtensionApproveTransferUpdated(address,bool)"(
      extension?: PromiseOrValue<string> | null,
      enabled?: null
    ): ExtensionApproveTransferUpdatedEventFilter;
    ExtensionApproveTransferUpdated(
      extension?: PromiseOrValue<string> | null,
      enabled?: null
    ): ExtensionApproveTransferUpdatedEventFilter;

    "ExtensionBlacklisted(address,address)"(
      extension?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): ExtensionBlacklistedEventFilter;
    ExtensionBlacklisted(
      extension?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): ExtensionBlacklistedEventFilter;

    "ExtensionRegistered(address,address)"(
      extension?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): ExtensionRegisteredEventFilter;
    ExtensionRegistered(
      extension?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): ExtensionRegisteredEventFilter;

    "ExtensionRoyaltiesUpdated(address,address[],uint256[])"(
      extension?: PromiseOrValue<string> | null,
      receivers?: null,
      basisPoints?: null
    ): ExtensionRoyaltiesUpdatedEventFilter;
    ExtensionRoyaltiesUpdated(
      extension?: PromiseOrValue<string> | null,
      receivers?: null,
      basisPoints?: null
    ): ExtensionRoyaltiesUpdatedEventFilter;

    "ExtensionUnregistered(address,address)"(
      extension?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): ExtensionUnregisteredEventFilter;
    ExtensionUnregistered(
      extension?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): ExtensionUnregisteredEventFilter;

    "MintPermissionsUpdated(address,address,address)"(
      extension?: PromiseOrValue<string> | null,
      permissions?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): MintPermissionsUpdatedEventFilter;
    MintPermissionsUpdated(
      extension?: PromiseOrValue<string> | null,
      permissions?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): MintPermissionsUpdatedEventFilter;

    "RoyaltiesUpdated(uint256,address[],uint256[])"(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      receivers?: null,
      basisPoints?: null
    ): RoyaltiesUpdatedEventFilter;
    RoyaltiesUpdated(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      receivers?: null,
      basisPoints?: null
    ): RoyaltiesUpdatedEventFilter;
  };

  estimateGas: {
    blacklistExtension(
      extension: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getExtensions(overrides?: CallOverrides): Promise<BigNumber>;

    getFeeBps(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFeeRecipients(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFees(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoyalties(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "registerExtension(address,string)"(
      extension: PromiseOrValue<string>,
      baseURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "registerExtension(address,string,bool)"(
      extension: PromiseOrValue<string>,
      baseURI: PromiseOrValue<string>,
      baseURIIdentical: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    royaltyInfo(
      tokenId: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setApproveTransferExtension(
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBaseTokenURI(
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setBaseTokenURIExtension(string)"(
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setBaseTokenURIExtension(string,bool)"(
      uri: PromiseOrValue<string>,
      identical: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMintPermissions(
      extension: PromiseOrValue<string>,
      permissions: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setRoyalties(uint256,address[],uint256[])"(
      tokenId: PromiseOrValue<BigNumberish>,
      receivers: PromiseOrValue<string>[],
      basisPoints: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setRoyalties(address[],uint256[])"(
      receivers: PromiseOrValue<string>[],
      basisPoints: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRoyaltiesExtension(
      extension: PromiseOrValue<string>,
      receivers: PromiseOrValue<string>[],
      basisPoints: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setTokenURI(uint256,string)"(
      tokenId: PromiseOrValue<BigNumberish>,
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setTokenURI(uint256[],string[])"(
      tokenIds: PromiseOrValue<BigNumberish>[],
      uris: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setTokenURIExtension(uint256[],string[])"(
      tokenId: PromiseOrValue<BigNumberish>[],
      uri: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setTokenURIExtension(uint256,string)"(
      tokenId: PromiseOrValue<BigNumberish>,
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTokenURIPrefix(
      prefix: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTokenURIPrefixExtension(
      prefix: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenExtension(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unregisterExtension(
      extension: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    blacklistExtension(
      extension: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getExtensions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFeeBps(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFeeRecipients(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFees(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoyalties(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "registerExtension(address,string)"(
      extension: PromiseOrValue<string>,
      baseURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "registerExtension(address,string,bool)"(
      extension: PromiseOrValue<string>,
      baseURI: PromiseOrValue<string>,
      baseURIIdentical: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    royaltyInfo(
      tokenId: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setApproveTransferExtension(
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBaseTokenURI(
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setBaseTokenURIExtension(string)"(
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setBaseTokenURIExtension(string,bool)"(
      uri: PromiseOrValue<string>,
      identical: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMintPermissions(
      extension: PromiseOrValue<string>,
      permissions: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setRoyalties(uint256,address[],uint256[])"(
      tokenId: PromiseOrValue<BigNumberish>,
      receivers: PromiseOrValue<string>[],
      basisPoints: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setRoyalties(address[],uint256[])"(
      receivers: PromiseOrValue<string>[],
      basisPoints: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRoyaltiesExtension(
      extension: PromiseOrValue<string>,
      receivers: PromiseOrValue<string>[],
      basisPoints: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setTokenURI(uint256,string)"(
      tokenId: PromiseOrValue<BigNumberish>,
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setTokenURI(uint256[],string[])"(
      tokenIds: PromiseOrValue<BigNumberish>[],
      uris: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setTokenURIExtension(uint256[],string[])"(
      tokenId: PromiseOrValue<BigNumberish>[],
      uri: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setTokenURIExtension(uint256,string)"(
      tokenId: PromiseOrValue<BigNumberish>,
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTokenURIPrefix(
      prefix: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTokenURIPrefixExtension(
      prefix: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenExtension(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unregisterExtension(
      extension: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
