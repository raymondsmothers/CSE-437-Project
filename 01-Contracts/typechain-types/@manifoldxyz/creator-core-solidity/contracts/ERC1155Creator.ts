/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface ERC1155CreatorInterface extends utils.Interface {
  functions: {
    "approveAdmin(address)": FunctionFragment;
    "balanceOf(address,uint256)": FunctionFragment;
    "balanceOfBatch(address[],uint256[])": FunctionFragment;
    "blacklistExtension(address)": FunctionFragment;
    "burn(address,uint256[],uint256[])": FunctionFragment;
    "getAdmins()": FunctionFragment;
    "getExtensions()": FunctionFragment;
    "getFeeBps(uint256)": FunctionFragment;
    "getFeeRecipients(uint256)": FunctionFragment;
    "getFees(uint256)": FunctionFragment;
    "getRoyalties(uint256)": FunctionFragment;
    "isAdmin(address)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "mintBaseExisting(address[],uint256[],uint256[])": FunctionFragment;
    "mintBaseNew(address[],uint256[],string[])": FunctionFragment;
    "mintExtensionExisting(address[],uint256[],uint256[])": FunctionFragment;
    "mintExtensionNew(address[],uint256[],string[])": FunctionFragment;
    "owner()": FunctionFragment;
    "registerExtension(address,string)": FunctionFragment;
    "registerExtension(address,string,bool)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "revokeAdmin(address)": FunctionFragment;
    "royaltyInfo(uint256,uint256)": FunctionFragment;
    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,uint256,bytes)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setApproveTransferExtension(bool)": FunctionFragment;
    "setBaseTokenURI(string)": FunctionFragment;
    "setBaseTokenURIExtension(string)": FunctionFragment;
    "setBaseTokenURIExtension(string,bool)": FunctionFragment;
    "setMintPermissions(address,address)": FunctionFragment;
    "setRoyalties(uint256,address[],uint256[])": FunctionFragment;
    "setRoyalties(address[],uint256[])": FunctionFragment;
    "setRoyaltiesExtension(address,address[],uint256[])": FunctionFragment;
    "setTokenURI(uint256,string)": FunctionFragment;
    "setTokenURI(uint256[],string[])": FunctionFragment;
    "setTokenURIExtension(uint256[],string[])": FunctionFragment;
    "setTokenURIExtension(uint256,string)": FunctionFragment;
    "setTokenURIPrefix(string)": FunctionFragment;
    "setTokenURIPrefixExtension(string)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "tokenExtension(uint256)": FunctionFragment;
    "totalSupply(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unregisterExtension(address)": FunctionFragment;
    "uri(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "approveAdmin"
      | "balanceOf"
      | "balanceOfBatch"
      | "blacklistExtension"
      | "burn"
      | "getAdmins"
      | "getExtensions"
      | "getFeeBps"
      | "getFeeRecipients"
      | "getFees"
      | "getRoyalties"
      | "isAdmin"
      | "isApprovedForAll"
      | "mintBaseExisting"
      | "mintBaseNew"
      | "mintExtensionExisting"
      | "mintExtensionNew"
      | "owner"
      | "registerExtension(address,string)"
      | "registerExtension(address,string,bool)"
      | "renounceOwnership"
      | "revokeAdmin"
      | "royaltyInfo"
      | "safeBatchTransferFrom"
      | "safeTransferFrom"
      | "setApprovalForAll"
      | "setApproveTransferExtension"
      | "setBaseTokenURI"
      | "setBaseTokenURIExtension(string)"
      | "setBaseTokenURIExtension(string,bool)"
      | "setMintPermissions"
      | "setRoyalties(uint256,address[],uint256[])"
      | "setRoyalties(address[],uint256[])"
      | "setRoyaltiesExtension"
      | "setTokenURI(uint256,string)"
      | "setTokenURI(uint256[],string[])"
      | "setTokenURIExtension(uint256[],string[])"
      | "setTokenURIExtension(uint256,string)"
      | "setTokenURIPrefix"
      | "setTokenURIPrefixExtension"
      | "supportsInterface"
      | "tokenExtension"
      | "totalSupply"
      | "transferOwnership"
      | "unregisterExtension"
      | "uri"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "approveAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfBatch",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "blacklistExtension",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "getAdmins", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getExtensions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeBps",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeRecipients",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getFees",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoyalties",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "mintBaseExisting",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintBaseNew",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintExtensionExisting",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintExtensionNew",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerExtension(address,string)",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerExtension(address,string,bool)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "royaltyInfo",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "safeBatchTransferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setApproveTransferExtension",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBaseTokenURI",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBaseTokenURIExtension(string)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBaseTokenURIExtension(string,bool)",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMintPermissions",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoyalties(uint256,address[],uint256[])",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoyalties(address[],uint256[])",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoyaltiesExtension",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenURI(uint256,string)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenURI(uint256[],string[])",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenURIExtension(uint256[],string[])",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenURIExtension(uint256,string)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenURIPrefix",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenURIPrefixExtension",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenExtension",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "unregisterExtension",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "uri",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "approveAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blacklistExtension",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAdmins", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getExtensions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFeeBps", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFeeRecipients",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoyalties",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintBaseExisting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintBaseNew",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintExtensionExisting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintExtensionNew",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerExtension(address,string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerExtension(address,string,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "royaltyInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeBatchTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApproveTransferExtension",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBaseTokenURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBaseTokenURIExtension(string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBaseTokenURIExtension(string,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMintPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRoyalties(uint256,address[],uint256[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRoyalties(address[],uint256[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRoyaltiesExtension",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenURI(uint256,string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenURI(uint256[],string[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenURIExtension(uint256[],string[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenURIExtension(uint256,string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenURIPrefix",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenURIPrefixExtension",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenExtension",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unregisterExtension",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uri", data: BytesLike): Result;

  events: {
    "AdminApproved(address,address)": EventFragment;
    "AdminRevoked(address,address)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "DefaultRoyaltiesUpdated(address[],uint256[])": EventFragment;
    "ExtensionApproveTransferUpdated(address,bool)": EventFragment;
    "ExtensionBlacklisted(address,address)": EventFragment;
    "ExtensionRegistered(address,address)": EventFragment;
    "ExtensionRoyaltiesUpdated(address,address[],uint256[])": EventFragment;
    "ExtensionUnregistered(address,address)": EventFragment;
    "MintPermissionsUpdated(address,address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RoyaltiesUpdated(uint256,address[],uint256[])": EventFragment;
    "TransferBatch(address,address,address,uint256[],uint256[])": EventFragment;
    "TransferSingle(address,address,address,uint256,uint256)": EventFragment;
    "URI(string,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminApproved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AdminRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DefaultRoyaltiesUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ExtensionApproveTransferUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExtensionBlacklisted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExtensionRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExtensionRoyaltiesUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExtensionUnregistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MintPermissionsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoyaltiesUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferBatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferSingle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "URI"): EventFragment;
}

export interface AdminApprovedEventObject {
  account: string;
  sender: string;
}
export type AdminApprovedEvent = TypedEvent<
  [string, string],
  AdminApprovedEventObject
>;

export type AdminApprovedEventFilter = TypedEventFilter<AdminApprovedEvent>;

export interface AdminRevokedEventObject {
  account: string;
  sender: string;
}
export type AdminRevokedEvent = TypedEvent<
  [string, string],
  AdminRevokedEventObject
>;

export type AdminRevokedEventFilter = TypedEventFilter<AdminRevokedEvent>;

export interface ApprovalForAllEventObject {
  account: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface DefaultRoyaltiesUpdatedEventObject {
  receivers: string[];
  basisPoints: BigNumber[];
}
export type DefaultRoyaltiesUpdatedEvent = TypedEvent<
  [string[], BigNumber[]],
  DefaultRoyaltiesUpdatedEventObject
>;

export type DefaultRoyaltiesUpdatedEventFilter =
  TypedEventFilter<DefaultRoyaltiesUpdatedEvent>;

export interface ExtensionApproveTransferUpdatedEventObject {
  extension: string;
  enabled: boolean;
}
export type ExtensionApproveTransferUpdatedEvent = TypedEvent<
  [string, boolean],
  ExtensionApproveTransferUpdatedEventObject
>;

export type ExtensionApproveTransferUpdatedEventFilter =
  TypedEventFilter<ExtensionApproveTransferUpdatedEvent>;

export interface ExtensionBlacklistedEventObject {
  extension: string;
  sender: string;
}
export type ExtensionBlacklistedEvent = TypedEvent<
  [string, string],
  ExtensionBlacklistedEventObject
>;

export type ExtensionBlacklistedEventFilter =
  TypedEventFilter<ExtensionBlacklistedEvent>;

export interface ExtensionRegisteredEventObject {
  extension: string;
  sender: string;
}
export type ExtensionRegisteredEvent = TypedEvent<
  [string, string],
  ExtensionRegisteredEventObject
>;

export type ExtensionRegisteredEventFilter =
  TypedEventFilter<ExtensionRegisteredEvent>;

export interface ExtensionRoyaltiesUpdatedEventObject {
  extension: string;
  receivers: string[];
  basisPoints: BigNumber[];
}
export type ExtensionRoyaltiesUpdatedEvent = TypedEvent<
  [string, string[], BigNumber[]],
  ExtensionRoyaltiesUpdatedEventObject
>;

export type ExtensionRoyaltiesUpdatedEventFilter =
  TypedEventFilter<ExtensionRoyaltiesUpdatedEvent>;

export interface ExtensionUnregisteredEventObject {
  extension: string;
  sender: string;
}
export type ExtensionUnregisteredEvent = TypedEvent<
  [string, string],
  ExtensionUnregisteredEventObject
>;

export type ExtensionUnregisteredEventFilter =
  TypedEventFilter<ExtensionUnregisteredEvent>;

export interface MintPermissionsUpdatedEventObject {
  extension: string;
  permissions: string;
  sender: string;
}
export type MintPermissionsUpdatedEvent = TypedEvent<
  [string, string, string],
  MintPermissionsUpdatedEventObject
>;

export type MintPermissionsUpdatedEventFilter =
  TypedEventFilter<MintPermissionsUpdatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RoyaltiesUpdatedEventObject {
  tokenId: BigNumber;
  receivers: string[];
  basisPoints: BigNumber[];
}
export type RoyaltiesUpdatedEvent = TypedEvent<
  [BigNumber, string[], BigNumber[]],
  RoyaltiesUpdatedEventObject
>;

export type RoyaltiesUpdatedEventFilter =
  TypedEventFilter<RoyaltiesUpdatedEvent>;

export interface TransferBatchEventObject {
  operator: string;
  from: string;
  to: string;
  ids: BigNumber[];
  values: BigNumber[];
}
export type TransferBatchEvent = TypedEvent<
  [string, string, string, BigNumber[], BigNumber[]],
  TransferBatchEventObject
>;

export type TransferBatchEventFilter = TypedEventFilter<TransferBatchEvent>;

export interface TransferSingleEventObject {
  operator: string;
  from: string;
  to: string;
  id: BigNumber;
  value: BigNumber;
}
export type TransferSingleEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  TransferSingleEventObject
>;

export type TransferSingleEventFilter = TypedEventFilter<TransferSingleEvent>;

export interface URIEventObject {
  value: string;
  id: BigNumber;
}
export type URIEvent = TypedEvent<[string, BigNumber], URIEventObject>;

export type URIEventFilter = TypedEventFilter<URIEvent>;

export interface ERC1155Creator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ERC1155CreatorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    approveAdmin(
      admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOfBatch(
      accounts: PromiseOrValue<string>[],
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    blacklistExtension(
      extension: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    burn(
      account: PromiseOrValue<string>,
      tokenIds: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAdmins(
      overrides?: CallOverrides
    ): Promise<[string[]] & { admins: string[] }>;

    getExtensions(
      overrides?: CallOverrides
    ): Promise<[string[]] & { extensions: string[] }>;

    getFeeBps(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getFeeRecipients(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getFees(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    getRoyalties(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    isAdmin(
      admin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isApprovedForAll(
      account: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mintBaseExisting(
      to: PromiseOrValue<string>[],
      tokenIds: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintBaseNew(
      to: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      uris: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintExtensionExisting(
      to: PromiseOrValue<string>[],
      tokenIds: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintExtensionNew(
      to: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      uris: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "registerExtension(address,string)"(
      extension: PromiseOrValue<string>,
      baseURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "registerExtension(address,string,bool)"(
      extension: PromiseOrValue<string>,
      baseURI: PromiseOrValue<string>,
      baseURIIdentical: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeAdmin(
      admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    royaltyInfo(
      tokenId: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    safeBatchTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    safeTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setApproveTransferExtension(
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBaseTokenURI(
      uri_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setBaseTokenURIExtension(string)"(
      uri_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setBaseTokenURIExtension(string,bool)"(
      uri_: PromiseOrValue<string>,
      identical: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMintPermissions(
      extension: PromiseOrValue<string>,
      permissions: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setRoyalties(uint256,address[],uint256[])"(
      tokenId: PromiseOrValue<BigNumberish>,
      receivers: PromiseOrValue<string>[],
      basisPoints: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setRoyalties(address[],uint256[])"(
      receivers: PromiseOrValue<string>[],
      basisPoints: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRoyaltiesExtension(
      extension: PromiseOrValue<string>,
      receivers: PromiseOrValue<string>[],
      basisPoints: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setTokenURI(uint256,string)"(
      tokenId: PromiseOrValue<BigNumberish>,
      uri_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setTokenURI(uint256[],string[])"(
      tokenIds: PromiseOrValue<BigNumberish>[],
      uris: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setTokenURIExtension(uint256[],string[])"(
      tokenIds: PromiseOrValue<BigNumberish>[],
      uris: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setTokenURIExtension(uint256,string)"(
      tokenId: PromiseOrValue<BigNumberish>,
      uri_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTokenURIPrefix(
      prefix: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTokenURIPrefixExtension(
      prefix: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    tokenExtension(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalSupply(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unregisterExtension(
      extension: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    uri(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  approveAdmin(
    admin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    account: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfBatch(
    accounts: PromiseOrValue<string>[],
    ids: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  blacklistExtension(
    extension: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  burn(
    account: PromiseOrValue<string>,
    tokenIds: PromiseOrValue<BigNumberish>[],
    amounts: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAdmins(overrides?: CallOverrides): Promise<string[]>;

  getExtensions(overrides?: CallOverrides): Promise<string[]>;

  getFeeBps(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getFeeRecipients(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getFees(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string[], BigNumber[]]>;

  getRoyalties(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string[], BigNumber[]]>;

  isAdmin(
    admin: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isApprovedForAll(
    account: PromiseOrValue<string>,
    operator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mintBaseExisting(
    to: PromiseOrValue<string>[],
    tokenIds: PromiseOrValue<BigNumberish>[],
    amounts: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintBaseNew(
    to: PromiseOrValue<string>[],
    amounts: PromiseOrValue<BigNumberish>[],
    uris: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintExtensionExisting(
    to: PromiseOrValue<string>[],
    tokenIds: PromiseOrValue<BigNumberish>[],
    amounts: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintExtensionNew(
    to: PromiseOrValue<string>[],
    amounts: PromiseOrValue<BigNumberish>[],
    uris: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "registerExtension(address,string)"(
    extension: PromiseOrValue<string>,
    baseURI: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "registerExtension(address,string,bool)"(
    extension: PromiseOrValue<string>,
    baseURI: PromiseOrValue<string>,
    baseURIIdentical: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeAdmin(
    admin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  royaltyInfo(
    tokenId: PromiseOrValue<BigNumberish>,
    value: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber]>;

  safeBatchTransferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    ids: PromiseOrValue<BigNumberish>[],
    amounts: PromiseOrValue<BigNumberish>[],
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  safeTransferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: PromiseOrValue<string>,
    approved: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setApproveTransferExtension(
    enabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBaseTokenURI(
    uri_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setBaseTokenURIExtension(string)"(
    uri_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setBaseTokenURIExtension(string,bool)"(
    uri_: PromiseOrValue<string>,
    identical: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMintPermissions(
    extension: PromiseOrValue<string>,
    permissions: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setRoyalties(uint256,address[],uint256[])"(
    tokenId: PromiseOrValue<BigNumberish>,
    receivers: PromiseOrValue<string>[],
    basisPoints: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setRoyalties(address[],uint256[])"(
    receivers: PromiseOrValue<string>[],
    basisPoints: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRoyaltiesExtension(
    extension: PromiseOrValue<string>,
    receivers: PromiseOrValue<string>[],
    basisPoints: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setTokenURI(uint256,string)"(
    tokenId: PromiseOrValue<BigNumberish>,
    uri_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setTokenURI(uint256[],string[])"(
    tokenIds: PromiseOrValue<BigNumberish>[],
    uris: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setTokenURIExtension(uint256[],string[])"(
    tokenIds: PromiseOrValue<BigNumberish>[],
    uris: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setTokenURIExtension(uint256,string)"(
    tokenId: PromiseOrValue<BigNumberish>,
    uri_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTokenURIPrefix(
    prefix: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTokenURIPrefixExtension(
    prefix: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  tokenExtension(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  totalSupply(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unregisterExtension(
    extension: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  uri(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    approveAdmin(
      admin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(
      account: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: PromiseOrValue<string>[],
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    blacklistExtension(
      extension: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    burn(
      account: PromiseOrValue<string>,
      tokenIds: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    getAdmins(overrides?: CallOverrides): Promise<string[]>;

    getExtensions(overrides?: CallOverrides): Promise<string[]>;

    getFeeBps(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getFeeRecipients(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getFees(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    getRoyalties(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    isAdmin(
      admin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isApprovedForAll(
      account: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mintBaseExisting(
      to: PromiseOrValue<string>[],
      tokenIds: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    mintBaseNew(
      to: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      uris: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    mintExtensionExisting(
      to: PromiseOrValue<string>[],
      tokenIds: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    mintExtensionNew(
      to: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      uris: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    owner(overrides?: CallOverrides): Promise<string>;

    "registerExtension(address,string)"(
      extension: PromiseOrValue<string>,
      baseURI: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "registerExtension(address,string,bool)"(
      extension: PromiseOrValue<string>,
      baseURI: PromiseOrValue<string>,
      baseURIIdentical: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    revokeAdmin(
      admin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    royaltyInfo(
      tokenId: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    safeBatchTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    safeTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setApproveTransferExtension(
      enabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBaseTokenURI(
      uri_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setBaseTokenURIExtension(string)"(
      uri_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setBaseTokenURIExtension(string,bool)"(
      uri_: PromiseOrValue<string>,
      identical: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMintPermissions(
      extension: PromiseOrValue<string>,
      permissions: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setRoyalties(uint256,address[],uint256[])"(
      tokenId: PromiseOrValue<BigNumberish>,
      receivers: PromiseOrValue<string>[],
      basisPoints: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    "setRoyalties(address[],uint256[])"(
      receivers: PromiseOrValue<string>[],
      basisPoints: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setRoyaltiesExtension(
      extension: PromiseOrValue<string>,
      receivers: PromiseOrValue<string>[],
      basisPoints: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    "setTokenURI(uint256,string)"(
      tokenId: PromiseOrValue<BigNumberish>,
      uri_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setTokenURI(uint256[],string[])"(
      tokenIds: PromiseOrValue<BigNumberish>[],
      uris: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    "setTokenURIExtension(uint256[],string[])"(
      tokenIds: PromiseOrValue<BigNumberish>[],
      uris: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    "setTokenURIExtension(uint256,string)"(
      tokenId: PromiseOrValue<BigNumberish>,
      uri_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenURIPrefix(
      prefix: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenURIPrefixExtension(
      prefix: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    tokenExtension(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    totalSupply(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unregisterExtension(
      extension: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    uri(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "AdminApproved(address,address)"(
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): AdminApprovedEventFilter;
    AdminApproved(
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): AdminApprovedEventFilter;

    "AdminRevoked(address,address)"(
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): AdminRevokedEventFilter;
    AdminRevoked(
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): AdminRevokedEventFilter;

    "ApprovalForAll(address,address,bool)"(
      account?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      account?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "DefaultRoyaltiesUpdated(address[],uint256[])"(
      receivers?: null,
      basisPoints?: null
    ): DefaultRoyaltiesUpdatedEventFilter;
    DefaultRoyaltiesUpdated(
      receivers?: null,
      basisPoints?: null
    ): DefaultRoyaltiesUpdatedEventFilter;

    "ExtensionApproveTransferUpdated(address,bool)"(
      extension?: PromiseOrValue<string> | null,
      enabled?: null
    ): ExtensionApproveTransferUpdatedEventFilter;
    ExtensionApproveTransferUpdated(
      extension?: PromiseOrValue<string> | null,
      enabled?: null
    ): ExtensionApproveTransferUpdatedEventFilter;

    "ExtensionBlacklisted(address,address)"(
      extension?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): ExtensionBlacklistedEventFilter;
    ExtensionBlacklisted(
      extension?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): ExtensionBlacklistedEventFilter;

    "ExtensionRegistered(address,address)"(
      extension?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): ExtensionRegisteredEventFilter;
    ExtensionRegistered(
      extension?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): ExtensionRegisteredEventFilter;

    "ExtensionRoyaltiesUpdated(address,address[],uint256[])"(
      extension?: PromiseOrValue<string> | null,
      receivers?: null,
      basisPoints?: null
    ): ExtensionRoyaltiesUpdatedEventFilter;
    ExtensionRoyaltiesUpdated(
      extension?: PromiseOrValue<string> | null,
      receivers?: null,
      basisPoints?: null
    ): ExtensionRoyaltiesUpdatedEventFilter;

    "ExtensionUnregistered(address,address)"(
      extension?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): ExtensionUnregisteredEventFilter;
    ExtensionUnregistered(
      extension?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): ExtensionUnregisteredEventFilter;

    "MintPermissionsUpdated(address,address,address)"(
      extension?: PromiseOrValue<string> | null,
      permissions?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): MintPermissionsUpdatedEventFilter;
    MintPermissionsUpdated(
      extension?: PromiseOrValue<string> | null,
      permissions?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): MintPermissionsUpdatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "RoyaltiesUpdated(uint256,address[],uint256[])"(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      receivers?: null,
      basisPoints?: null
    ): RoyaltiesUpdatedEventFilter;
    RoyaltiesUpdated(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      receivers?: null,
      basisPoints?: null
    ): RoyaltiesUpdatedEventFilter;

    "TransferBatch(address,address,address,uint256[],uint256[])"(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      ids?: null,
      values?: null
    ): TransferBatchEventFilter;
    TransferBatch(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      ids?: null,
      values?: null
    ): TransferBatchEventFilter;

    "TransferSingle(address,address,address,uint256,uint256)"(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      id?: null,
      value?: null
    ): TransferSingleEventFilter;
    TransferSingle(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      id?: null,
      value?: null
    ): TransferSingleEventFilter;

    "URI(string,uint256)"(
      value?: null,
      id?: PromiseOrValue<BigNumberish> | null
    ): URIEventFilter;
    URI(value?: null, id?: PromiseOrValue<BigNumberish> | null): URIEventFilter;
  };

  estimateGas: {
    approveAdmin(
      admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    balanceOf(
      account: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: PromiseOrValue<string>[],
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    blacklistExtension(
      extension: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    burn(
      account: PromiseOrValue<string>,
      tokenIds: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAdmins(overrides?: CallOverrides): Promise<BigNumber>;

    getExtensions(overrides?: CallOverrides): Promise<BigNumber>;

    getFeeBps(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFeeRecipients(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFees(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoyalties(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAdmin(
      admin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      account: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintBaseExisting(
      to: PromiseOrValue<string>[],
      tokenIds: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintBaseNew(
      to: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      uris: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintExtensionExisting(
      to: PromiseOrValue<string>[],
      tokenIds: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintExtensionNew(
      to: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      uris: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "registerExtension(address,string)"(
      extension: PromiseOrValue<string>,
      baseURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "registerExtension(address,string,bool)"(
      extension: PromiseOrValue<string>,
      baseURI: PromiseOrValue<string>,
      baseURIIdentical: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeAdmin(
      admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    royaltyInfo(
      tokenId: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeBatchTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    safeTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setApproveTransferExtension(
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBaseTokenURI(
      uri_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setBaseTokenURIExtension(string)"(
      uri_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setBaseTokenURIExtension(string,bool)"(
      uri_: PromiseOrValue<string>,
      identical: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMintPermissions(
      extension: PromiseOrValue<string>,
      permissions: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setRoyalties(uint256,address[],uint256[])"(
      tokenId: PromiseOrValue<BigNumberish>,
      receivers: PromiseOrValue<string>[],
      basisPoints: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setRoyalties(address[],uint256[])"(
      receivers: PromiseOrValue<string>[],
      basisPoints: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRoyaltiesExtension(
      extension: PromiseOrValue<string>,
      receivers: PromiseOrValue<string>[],
      basisPoints: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setTokenURI(uint256,string)"(
      tokenId: PromiseOrValue<BigNumberish>,
      uri_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setTokenURI(uint256[],string[])"(
      tokenIds: PromiseOrValue<BigNumberish>[],
      uris: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setTokenURIExtension(uint256[],string[])"(
      tokenIds: PromiseOrValue<BigNumberish>[],
      uris: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setTokenURIExtension(uint256,string)"(
      tokenId: PromiseOrValue<BigNumberish>,
      uri_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTokenURIPrefix(
      prefix: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTokenURIPrefixExtension(
      prefix: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenExtension(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unregisterExtension(
      extension: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    uri(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approveAdmin(
      admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfBatch(
      accounts: PromiseOrValue<string>[],
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    blacklistExtension(
      extension: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    burn(
      account: PromiseOrValue<string>,
      tokenIds: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAdmins(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getExtensions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFeeBps(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFeeRecipients(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFees(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoyalties(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAdmin(
      admin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      account: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintBaseExisting(
      to: PromiseOrValue<string>[],
      tokenIds: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintBaseNew(
      to: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      uris: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintExtensionExisting(
      to: PromiseOrValue<string>[],
      tokenIds: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintExtensionNew(
      to: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      uris: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "registerExtension(address,string)"(
      extension: PromiseOrValue<string>,
      baseURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "registerExtension(address,string,bool)"(
      extension: PromiseOrValue<string>,
      baseURI: PromiseOrValue<string>,
      baseURIIdentical: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeAdmin(
      admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    royaltyInfo(
      tokenId: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    safeBatchTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    safeTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setApproveTransferExtension(
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBaseTokenURI(
      uri_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setBaseTokenURIExtension(string)"(
      uri_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setBaseTokenURIExtension(string,bool)"(
      uri_: PromiseOrValue<string>,
      identical: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMintPermissions(
      extension: PromiseOrValue<string>,
      permissions: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setRoyalties(uint256,address[],uint256[])"(
      tokenId: PromiseOrValue<BigNumberish>,
      receivers: PromiseOrValue<string>[],
      basisPoints: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setRoyalties(address[],uint256[])"(
      receivers: PromiseOrValue<string>[],
      basisPoints: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRoyaltiesExtension(
      extension: PromiseOrValue<string>,
      receivers: PromiseOrValue<string>[],
      basisPoints: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setTokenURI(uint256,string)"(
      tokenId: PromiseOrValue<BigNumberish>,
      uri_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setTokenURI(uint256[],string[])"(
      tokenIds: PromiseOrValue<BigNumberish>[],
      uris: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setTokenURIExtension(uint256[],string[])"(
      tokenIds: PromiseOrValue<BigNumberish>[],
      uris: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setTokenURIExtension(uint256,string)"(
      tokenId: PromiseOrValue<BigNumberish>,
      uri_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTokenURIPrefix(
      prefix: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTokenURIPrefixExtension(
      prefix: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenExtension(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unregisterExtension(
      extension: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    uri(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
